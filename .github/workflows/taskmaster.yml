name: Taskmaster Complete Workflow

on:
  # Manual dispatch with comprehensive input parameters and validation
  workflow_dispatch:
    inputs:
      complexity-threshold:
        description: 'Maximum complexity threshold for task breakdown (1-100)'
        required: false
        default: '40'
        type: string
      max-depth:
        description: 'Maximum depth for automatic task recursion (1-10)'
        required: false
        default: '3'
        type: string
      prd-path-glob:
        description: 'Path glob pattern for PRD files'
        required: false
        default: 'docs/**.prd.md'
        type: string
      breakdown-max-depth:
        description: 'Maximum depth for breakdown recursion (1-5)'
        required: false
        default: '2'
        type: string
      action-mode:
        description: 'Action mode to run'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'generate'
          - 'breakdown'
          - 'watcher'
      scan-mode:
        description: 'Scan mode for watcher'
        required: false
        default: 'webhook'
        type: choice
        options:
          - 'webhook'
          - 'full'
      taskmaster-version:
        description: 'Version of Taskmaster CLI to use'
        required: false
        default: '1.0.0'
        type: string
      force-download:
        description: 'Force download of Taskmaster CLI even if cached'
        required: false
        default: false
        type: boolean

  # Automatic trigger on PRD file changes
  push:
    paths:
      - 'docs/**.prd.md'
      - 'docs/**/*.prd.md'
    branches:
      - main
      - master

  # Trigger on issue comments for breakdown commands
  issue_comment:
    types: [created]

  # Trigger on issue state changes for dependency tracking
  issues:
    types: [closed, reopened]

  # Scheduled runs for periodic dependency checking
  schedule:
    # Every 10 minutes during business hours (9 AM - 6 PM UTC, Mon-Fri)
    - cron: '*/10 9-18 * * 1-5'
    # Hourly during off-hours and weekends
    - cron: '0 * * * *'

permissions:
  issues: write
  contents: read
  pull-requests: read

jobs:
  # Input validation job
  validate-inputs:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      complexity-threshold: ${{ steps.validate.outputs.complexity-threshold }}
      max-depth: ${{ steps.validate.outputs.max-depth }}
      breakdown-max-depth: ${{ steps.validate.outputs.breakdown-max-depth }}
    steps:
      - name: Validate Input Parameters
        id: validate
        run: |
          # Validate complexity-threshold (1-100)
          COMPLEXITY="${{ inputs.complexity-threshold }}"
          if [[ ! "$COMPLEXITY" =~ ^[0-9]+$ ]] || [ "$COMPLEXITY" -lt 1 ] || [ "$COMPLEXITY" -gt 100 ]; then
            echo "❌ Invalid complexity-threshold: $COMPLEXITY. Must be between 1 and 100."
            exit 1
          fi
          echo "complexity-threshold=$COMPLEXITY" >> $GITHUB_OUTPUT

          # Validate max-depth (1-10)
          MAX_DEPTH="${{ inputs.max-depth }}"
          if [[ ! "$MAX_DEPTH" =~ ^[0-9]+$ ]] || [ "$MAX_DEPTH" -lt 1 ] || [ "$MAX_DEPTH" -gt 10 ]; then
            echo "❌ Invalid max-depth: $MAX_DEPTH. Must be between 1 and 10."
            exit 1
          fi
          echo "max-depth=$MAX_DEPTH" >> $GITHUB_OUTPUT

          # Validate breakdown-max-depth (1-5)
          BREAKDOWN_DEPTH="${{ inputs.breakdown-max-depth }}"
          if [[ ! "$BREAKDOWN_DEPTH" =~ ^[0-9]+$ ]] || [ "$BREAKDOWN_DEPTH" -lt 1 ] || [ "$BREAKDOWN_DEPTH" -gt 5 ]; then
            echo "❌ Invalid breakdown-max-depth: $BREAKDOWN_DEPTH. Must be between 1 and 5."
            exit 1
          fi
          echo "breakdown-max-depth=$BREAKDOWN_DEPTH" >> $GITHUB_OUTPUT

          # Validate PRD path glob
          PRD_GLOB="${{ inputs.prd-path-glob }}"
          if [[ -z "$PRD_GLOB" ]] || [[ ! "$PRD_GLOB" =~ \.prd\.md$ ]]; then
            echo "❌ Invalid prd-path-glob: $PRD_GLOB. Must end with .prd.md"
            exit 1
          fi

          # Validate taskmaster version format (basic semver check)
          VERSION="${{ inputs.taskmaster-version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid taskmaster-version: $VERSION. Must be in semver format (x.y.z)"
            exit 1
          fi

          echo "✅ All input parameters validated successfully"

  # Determine action mode based on trigger
  determine-mode:
    runs-on: ubuntu-latest
    outputs:
      action-mode: ${{ steps.mode.outputs.action-mode }}
      scan-mode: ${{ steps.mode.outputs.scan-mode }}
    steps:
      - name: Determine Action Mode
        id: mode
        run: |
          case "${{ github.event_name }}" in
            "workflow_dispatch")
              echo "action-mode=${{ inputs.action-mode }}" >> $GITHUB_OUTPUT
              echo "scan-mode=${{ inputs.scan-mode }}" >> $GITHUB_OUTPUT
              ;;
            "push")
              echo "action-mode=generate" >> $GITHUB_OUTPUT
              echo "scan-mode=webhook" >> $GITHUB_OUTPUT
              ;;
            "issue_comment")
              echo "action-mode=breakdown" >> $GITHUB_OUTPUT
              echo "scan-mode=webhook" >> $GITHUB_OUTPUT
              ;;
            "issues")
              echo "action-mode=watcher" >> $GITHUB_OUTPUT
              echo "scan-mode=webhook" >> $GITHUB_OUTPUT
              ;;
            "schedule")
              echo "action-mode=watcher" >> $GITHUB_OUTPUT
              echo "scan-mode=full" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "action-mode=full" >> $GITHUB_OUTPUT
              echo "scan-mode=webhook" >> $GITHUB_OUTPUT
              ;;
          esac

  # Filter breakdown comments
  check-breakdown-comment:
    if: github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Check if comment starts with /breakdown
        id: check
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          if [[ "$COMMENT_BODY" =~ ^/breakdown ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "✅ Breakdown command detected in comment"
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Comment does not start with /breakdown, skipping"
          fi

  # Main Taskmaster execution
  taskmaster:
    needs: [determine-mode]
    if: |
      always() && (
        github.event_name != 'workflow_dispatch' || 
        needs.validate-inputs.result == 'success'
      ) && (
        github.event_name != 'issue_comment' || 
        needs.check-breakdown-comment.outputs.should-run == 'true'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log Trigger Information
        run: |
          echo "🚀 Taskmaster triggered by: ${{ github.event_name }}"
          echo "📋 Action mode: ${{ needs.determine-mode.outputs.action-mode }}"
          echo "🔍 Scan mode: ${{ needs.determine-mode.outputs.scan-mode }}"
          
          case "${{ github.event_name }}" in
            "workflow_dispatch")
              echo "👤 Triggered manually by: ${{ github.actor }}"
              echo "⚙️ Parameters:"
              echo "  • Complexity threshold: ${{ inputs.complexity-threshold }}"
              echo "  • Max depth: ${{ inputs.max-depth }}"
              echo "  • PRD path glob: ${{ inputs.prd-path-glob }}"
              echo "  • Breakdown max depth: ${{ inputs.breakdown-max-depth }}"
              echo "  • Taskmaster version: ${{ inputs.taskmaster-version }}"
              echo "  • Force download: ${{ inputs.force-download }}"
              ;;
            "push")
              echo "📝 PRD files changed in commit: ${{ github.sha }}"
              echo "👤 Committed by: ${{ github.event.head_commit.author.name }}"
              ;;
            "issue_comment")
              echo "💬 Comment on issue #${{ github.event.issue.number }}"
              echo "👤 Comment by: ${{ github.event.comment.user.login }}"
              echo "📄 Comment body: ${{ github.event.comment.body }}"
              ;;
            "issues")
              echo "📋 Issue #${{ github.event.issue.number }} ${{ github.event.action }}"
              echo "👤 Action by: ${{ github.actor }}"
              ;;
            "schedule")
              echo "⏰ Scheduled run - checking all dependencies"
              ;;
          esac

      - name: Run Taskmaster
        id: taskmaster
        uses: ./
        with:
          skip-checkout: 'true'
          complexity-threshold: ${{ github.event_name == 'workflow_dispatch' && inputs.complexity-threshold || '40' }}
          max-depth: ${{ github.event_name == 'workflow_dispatch' && inputs.max-depth || '3' }}
          prd-path-glob: ${{ github.event_name == 'workflow_dispatch' && inputs.prd-path-glob || 'docs/**.prd.md' }}
          breakdown-max-depth: ${{ github.event_name == 'workflow_dispatch' && inputs.breakdown-max-depth || '2' }}
          action-mode: ${{ needs.determine-mode.outputs.action-mode }}
          scan-mode: ${{ needs.determine-mode.outputs.scan-mode }}
          taskmaster-version: ${{ github.event_name == 'workflow_dispatch' && inputs.taskmaster-version || '1.0.0' }}
          force-download: ${{ github.event_name == 'workflow_dispatch' && inputs.force-download || false }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Task Graph Artifact
        if: steps.taskmaster.outputs.task-graph
        uses: actions/upload-artifact@v4
        with:
          name: task-graph-${{ github.run_id }}
          path: ${{ steps.taskmaster.outputs.task-graph }}
          retention-days: 30

      - name: Summary
        run: |
          echo "## 📊 Taskmaster Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action Mode**: ${{ needs.determine-mode.outputs.action-mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Mode**: ${{ needs.determine-mode.outputs.scan-mode }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -n "${{ steps.taskmaster.outputs.task-graph }}" ]]; then
            echo "- **Task Graph**: Generated and uploaded as artifact" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ steps.taskmaster.outputs.issues-created }}" ]]; then
            echo "- **Issues Created**: ${{ steps.taskmaster.outputs.issues-created }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ steps.taskmaster.outputs.sub-issues-created }}" ]]; then
            echo "- **Sub-issues Created**: ${{ steps.taskmaster.outputs.sub-issues-created }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ steps.taskmaster.outputs.issues-updated }}" ]]; then
            echo "- **Issues Updated**: ${{ steps.taskmaster.outputs.issues-updated }}" >> $GITHUB_STEP_SUMMARY
          fi

  # React to breakdown comments
  react-to-comment:
    needs: [taskmaster, check-breakdown-comment]
    if: github.event_name == 'issue_comment' && needs.check-breakdown-comment.outputs.should-run == 'true' && always()
    runs-on: ubuntu-latest
    steps:
      - name: React to comment
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ needs.taskmaster.result }}' === 'success';
            const reaction = success ? '+1' : '-1';
            
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: reaction
            });