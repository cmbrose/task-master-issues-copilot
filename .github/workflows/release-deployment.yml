name: Release Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string
      create-tag:
        description: 'Create new tag if it does not exist'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag-exists: ${{ steps.check-tag.outputs.exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"

      - name: Check if tag exists
        id: check-tag
        run: |
          if git tag | grep -q "^${{ steps.version.outputs.version }}$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag if needed
        if: |
          github.event_name == 'workflow_dispatch' && 
          github.event.inputs.create-tag == 'true' && 
          steps.check-tag.outputs.exists == 'false'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build and Compile
        run: |
          npm run lint
          npx tsc --noEmit

      - name: Run Tests
        run: |
          npm run test:unit
          npm run test:triggers
          npm run test:generate

      - name: Create Release Package
        run: |
          mkdir -p release-package
          
          # Copy essential files for the release
          cp -r actions/ release-package/
          cp -r scripts/ release-package/
          cp action.yml release-package/
          cp package.json release-package/
          cp package-lock.json release-package/
          cp README.md release-package/
          cp LICENSE release-package/
          
          # Create distribution zip
          cd release-package
          zip -r ../taskmaster-actions-${{ needs.validate-release.outputs.version }}.zip .
          cd ..

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: |
            release-package/
            taskmaster-actions-${{ needs.validate-release.outputs.version }}.zip
          retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Release Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}

      - name: Generate Release Notes
        id: release-notes
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          
          # Get the previous tag for comparison
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^$VERSION$" | head -n 1)
          
          # Generate release notes
          cat > release-notes.md << EOF
          # Release $VERSION
          
          ## What's Changed
          
          ### Features and Improvements
          $(git log --pretty=format:"- %s" $PREVIOUS_TAG..$VERSION | grep -E "(feat|feature)" || echo "- No new features in this release")
          
          ### Bug Fixes
          $(git log --pretty=format:"- %s" $PREVIOUS_TAG..$VERSION | grep -E "(fix|bug)" || echo "- No bug fixes in this release")
          
          ### Other Changes
          $(git log --pretty=format:"- %s" $PREVIOUS_TAG..$VERSION | grep -vE "(feat|feature|fix|bug)" | head -10)
          
          ## Usage
          
          ### Using the Composite Action
          \`\`\`yaml
          - name: Run Taskmaster
            uses: cmbrose/task-master-issues@$VERSION
            with:
              github-token: \${{ secrets.GITHUB_TOKEN }}
              complexity-threshold: '40'
              max-depth: '3'
          \`\`\`
          
          ### Using Individual Actions
          \`\`\`yaml
          - name: Generate Issues
            uses: cmbrose/task-master-issues/actions/taskmaster-generate@$VERSION
            with:
              github-token: \${{ secrets.GITHUB_TOKEN }}
          \`\`\`
          
          ## Installation
          
          Add this action to your workflow:
          \`\`\`yaml
          uses: cmbrose/task-master-issues@$VERSION
          \`\`\`
          
          ## Full Changelog
          **Full Changelog**: https://github.com/cmbrose/task-master-issues/compare/$PREVIOUS_TAG...$VERSION
          EOF

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: ${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./taskmaster-actions-${{ needs.validate-release.outputs.version }}.zip
          asset_name: taskmaster-actions-${{ needs.validate-release.outputs.version }}.zip
          asset_content_type: application/zip

  update-marketplace:
    name: Update Action Marketplace
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: ${{ !contains(needs.validate-release.outputs.version, '-') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-release.outputs.version }}

      - name: Validate Action Metadata
        run: |
          # Validate main action.yml
          if [ ! -f "action.yml" ]; then
            echo "Error: action.yml not found"
            exit 1
          fi
          
          # Validate action.yml syntax
          npx js-yaml action.yml > /dev/null
          
          # Validate individual actions
          for action in actions/*/; do
            if [ -f "$action/action.yml" ]; then
              npx js-yaml "$action/action.yml" > /dev/null
              echo "âœ… $action/action.yml is valid"
            fi
          done

      - name: Update Major Version Tag
        run: |
          VERSION=${{ needs.validate-release.outputs.version }}
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
          
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # Update or create major version tag (e.g., v1)
          git tag -f $MAJOR_VERSION
          git push origin $MAJOR_VERSION --force

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, create-release, update-marketplace]
    if: always()
    steps:
      - name: Deployment Report
        run: |
          echo "# Release Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tag Exists: ${{ needs.validate-release.outputs.tag-exists }}" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Release Creation: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Marketplace Update: ${{ needs.update-marketplace.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- The GitHub Action is now available at \`cmbrose/task-master-issues@${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Users can reference the new version in their workflows" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation has been updated with usage examples" >> $GITHUB_STEP_SUMMARY