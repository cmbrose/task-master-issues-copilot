name: Auto Resolve Merge Conflicts

on:
  repository_dispatch:
    types: [copilot_conflict]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to check for conflicts (required)'
        required: true
        type: string

jobs:
  notify-copilot:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      models: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR info
        id: prinfo
        run: |
          # Use workflow_dispatch input if present, else use repository_dispatch payload
          if [ -n "${{ github.event.inputs.pr_number }}" ]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          else
            PR_NUMBER="${{ github.event.client_payload.pr_number }}"
          fi
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number provided."
            exit 1
          fi
          gh pr view $PR_NUMBER --json headRefName,baseRefName -q '.headRefName + "," + .baseRefName' > pr_branches.txt
          HEAD_BRANCH=$(cut -d, -f1 pr_branches.txt)
          BASE_BRANCH=$(cut -d, -f2 pr_branches.txt)
          echo "head_branch=$HEAD_BRANCH" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Install tools
        run: |
          pip install --quiet llm
          llm install llm-github-models
          sudo apt-get update -qq
          sudo apt-get install -yqq jq
          llm keys set github --value ${{ secrets.GITHUB_TOKEN }}
          
      - name: Fetch PR and base branches
        run: |
          git fetch origin "${{ steps.prinfo.outputs.head_branch }}"
          git fetch origin "${{ steps.prinfo.outputs.base_branch }}"

      - name: Checkout base branch
        run: |
          git config --global user.email "auto-conflict-resolver@tools.com"
          git config --global user.name "Conflict Resolver"
          git checkout "origin/${{ steps.prinfo.outputs.base_branch }}" -b base-branch

      - name: Attempt merge and collect conflicts
        id: merge
        continue-on-error: true
        run: |
          git merge "origin/${{ steps.prinfo.outputs.head_branch }}" || true
          git diff --name-only --diff-filter=U > conflict_files.txt

      - name: Handle Merge Conflicts
        run: |
          if [ ! -s conflict_files.txt ]; then
            echo "No merge conflicts detected. Exiting."
            exit 0
          fi

          echo "Files to fix:"
          cat conflict_files.txt

          while IFS= read -r file || [ -n "$file" ]; do
            if [ "$file" == 'package-lock.json' ]; then
              # Handle package.lock manually by just deleting it and reinstalling at the end
              echo "package-lock.json is conflicted, deleting it. It will be regenerated by reinstalling dependencies."
              rm -f package-lock.json
            else
              echo "Resolving conflict in $file with LLM..."
              llm --model github/o3-mini \
                --functions .github/workflows/scripts/resolve-merge-conflicts.py \
                --td \
                --fragment $file \
                --system "You are a merge conflict resolver. Use the provided tools to resolve the conflict." \
                "Resolve conflicts in $file"

              if grep -q '<<<<<<<\|=======\|>>>>>>>' "$file"; then
                echo "Conflict markers still present in $file"
                cat $file
                exit 1
              else
                echo "No conflict markers found in $file"
              fi
            fi
          done < conflict_files.txt

          if grep -q '^package-lock.json$' conflict_files.txt; then
            echo "Reinstalling to restore package-lock.json"
            npm i
          fi

          git add .
          git commit -am "Merge conflicts"
          git push